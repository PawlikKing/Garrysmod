--@name hatchCore 4.1
--@author Pawik

//Shared
    
    owner = owner()
    chip = chip()

    tbl_server = {} 
    tbl_client = {}    
    baking_finished = false
    
    quotaMax = quotaMax() / 2
    
    function sendData( table )
    
        local content = bit.tableToString(table)
                            
        local cmpr
            local compressed = coroutine.wrap( function()
            cmpr = bit.compress( content )
            return true
        end) 
        
        hook.add( 'think', 'await_compression', function()
             
            while quotaAverage() < quotaMax do
                if not compressed() then return end
                hook.remove( 'think', 'await_compression' )
                local len = string.len(cmpr)
                    net.start('comp')
                    net.writeStream(cmpr,false) 
                    net.send()       
                    printConsole( Color(255,192,0),"SERVER| ", Color(255,255,255),'table streaming to clients',Color(0,255,255),' | ', len, ' bits')   
                    break
            end  
            
        end)  
        
    end
    
    function dataByName(Table,name,class) 
        
        local amount = table.count( Table )

        local data
        for i=1, amount, 1 do
            
            local row = Table[i]
            if row[1] == name and row[2] == class then 
                data = row[3]
                break
            end
            
        end
        
        if !data then print( Color(255,0,0), 'No such data: ', Color(150,150,150), name ) return end
        return data
        
    end

if SERVER then
    
    dl_list = 
    {
        {'coach', 'phys',"https://dl.dropboxusercontent.com/s/aqy7bj079k0hmc0/physicsOrygin.obj"},
        {'coach', 'mesh',"https://dl.dropboxusercontent.com/s/zvvzyowdoqabxqf/mesh.obj"},
        {'coach', 'material',"https://www.dropbox.com/s/msp4ezskpsqgb6z/Materiall.png?dl=1"}
    }
    dl_amount = table.count( dl_list )
    dl_complete = false
    
    local dl_index = 1
    
    function bakePhys( data )  
        
        local name =     data[1]
        local class =    data[2]
        local content =  data[3] 
                 
        local tbl_strVec = string.explode( 'v ', content )
    
        table.remove( tbl_strVec, 1 )
        
        local vec_amount = table.count(tbl_strVec)
        
        local tbl_vectors = {}
        
        local Index = 0
        while Index < vec_amount do
            
            Index = Index + 1
            local strVec = string.explode( ' ', tbl_strVec[Index] )
            local Vector = Vector( tonumber(strVec[1]), tonumber(strVec[2]), tonumber(strVec[3]) )
            table.insert( tbl_vectors, Vector )
            
        end
        table.insert( tbl_server, { name, 'phys', { tbl_vectors } } )  
        hook.add( 'think', 'req', function() 
            
            if not http.canRequest() then return end
            hook.remove( 'think', 'req' )
            dl_index = dl_index + 1
            dl_all()
            
        end)
        printConsole(Color(255,192,0),"SERVER| ", Color(0,255,0),'Done!')
        
        return 
            
    end    
    
    function dl_all()
        
        if dl_index > dl_amount then 
            printConsole(Color(255,192,0),"SERVER| ", Color(255,255,255), 'Sending client table...')
            sendData( tbl_client )
            return 
        end
        
        local data   = dl_list[ dl_index ]
        local name   = data[ 1 ]
        local class  = data[ 2 ]
        local url    = data[ 3 ]
        
        if class == "material" then 
            printConsole( Color(255,192,0),"SERVER| ", Color(255,255,255),"including: ", class.." "..name  )
            table.insert( tbl_client, { name, class, url } )
            dl_index = dl_index + 1
            return dl_all()
        end
        
        http.get( url, function( file )
            
            if class == "phys" then 
                printConsole(Color(255,192,0),"SERVER| ",Color(255,255,255),'Baking: ',Color(0,255,255),name..' | '..class)
                bakePhys( { name, class, file } )  
                return
            end
            
            printConsole( Color(255,192,0),"SERVER| ", Color(255,255,255),"including: ", class.." "..name  )
            table.insert( tbl_client, { name, class, file } )
            dl_index = dl_index + 1
            return dl_all()            
            
        end) 
        
    end dl_all()    
    
else
    
    function bakeMaterial( data )
        
        local name   =  data[1]
        local class  =  data[2]
        local url    =  data[3]    
        
        local Mat = material.create( "VertexLitGeneric" )  
              Mat:setTextureURL("$basetexture", url )
    
        table.insert( tbl_client, { name, 'material', Mat } )  
        clientBake()
        printConsole( Color(0,192,255),"CLIENT| ",Color(0,255,0),'Done!')
        
        return
        
    end
    
    function bakeMesh( data )
        
        local name     =  data[1]
        local class    =  data[2]
        local content  =  data[3]

        local Mesh
            local meshReady = coroutine.wrap( function()
            Mesh = mesh.createFromObj( content, true, true ) 
            return true
        end) 
        
        hook.add( 'think', 'await_bake', function()
             
            if not meshReady() then return end
            table.insert( tbl_client, { name, 'mesh', Mesh } )
            hook.remove( 'think', 'await_bake' )
            clientBake()
            printConsole( Color(0,192,255),"CLIENT| ",Color(0,255,0),'Done!')       
            
        end)  
        
    end 
    
    local bake_amount = 0
    local bake_index = 1
    function clientBake()
        
        if bake_index > bake_amount then 
            printConsole( Color(255,0,255), "SHARED| ",Color(255,255,255),"Finished" ) 
            baking_finished = true
            net.start('baking_finished')
            net.send()
            return 
        end
        
        local data   =  tbl_raw[ bake_index ]
        local name   =  data[ 1 ] 
        local class  =  data[ 2 ]
        
        bake_index = bake_index + 1 
        
        printConsole( Color(0,192,255),"CLIENT| ",Color(255,255,255),'Baking: ',Color(0,255,255),name..' | '..class)
        
        if class == "material" then
            bakeMaterial( data )
            return clientBake()
        end
        
        if class == "mesh" ||  class == "shared" then
            bakeMesh( data )
        end
    
    end
   
    net.receive('comp',function()
        
        printConsole( Color(0,192,255),"CLIENT| ",Color(255,255,255),'Stream reading...')
        
        net.readStream(function(compressed)
            printConsole( Color(0,192,255),"CLIENT| ",Color(255,255,255), 'content decompressing...' )
        
            local dcmp
                local decompressed = coroutine.wrap( function()
                dcmp = bit.decompress(compressed)
                return true
            end) 
            
            hook.add( 'think', 'await_decompress', function()
                 
                while quotaAverage() < quotaMax do
                    if not decompressed() then return end
                    hook.remove( 'think', 'await_decompress' )    
                    tbl_raw = bit.stringToTable( dcmp )
                    printConsole( Color(0,192,255),"CLIENT| ",Color(0,255,0), 'Done!' )
                    bake_amount = table.count( tbl_raw )
                    clientBake()
                    break
                end
                
            end)
            
        end)        
        
    end)
       
end



if SERVER then
    
    local spawn = false
    net.receive( 'baking_finished', function() 
    
        if spawn then return end 
        spawn = true
        baking_finished = true
        
        local vertexes = dataByName( tbl_server,'coach','phys')
        local custom_prop = prop.createCustom( chip:getPos(), Angle(), vertexes, true)
        
        hook.add( 'think', 'prop_validate', function() 
            
            if not isValid( custom_prop ) then return end
            hook.remove( 'think', 'prop_validate' )
            net.start( 'remesh' )
            net.writeEntity( custom_prop )
            timer.create('await',0.01,1,function()
                net.send()
                timer.remove('await')
            end)
            
        end)
        
    end) 
    
else
    
    net.receive( 'remesh', function() 
        
        local prop      = net.readEntity()
        
        hook.add('think','baking_finished',function()
            
            if not baking_finished then return end
            hook.remove('think','baking_finished')
            
            local mesh      = dataByName( tbl_client,'coach','mesh').obj
            local material  = dataByName( tbl_client,'coach','material')
            
            prop:setMesh( mesh )
            prop:setMeshMaterial( material )
            
        end)
        
    end)
    
end

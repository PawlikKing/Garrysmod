@name Initiator
@persist Blueprint:string [Scanner TechEnt ClonEnt Owner]:entity Scan_r Objects:table Indexer
@model models/maxofs2d/hover_classic.mdl

#[
    > BASIC INFORMATIONS
      Required "wire_holograms_modelany 1"
      Required "remoteupload" extension
      Github: https://github.com/PawlikKing
    
    > Chat commands:
      /set base        - determines the base location of the scanner by owner currently aimed entity        
      /set clone       - determines e2 chip where the new code will be pasted by owner currently aimed entity                 
      /set r [number]  - determines the radius of the scanning grid             
      /scan            - performs the process
]#

if( first() | dupefinished() )
{
    Owner = owner()
    TechEnt = Scanner = entity()
    holoCreate( 0, Scanner:pos(), vec(0), Scanner:angles(), vec4(0,255,255,125),"models/hunter/misc/sphere375x375.mdl") holoDisableShading( 0, 1 ) holoParent( 0, Scanner ) holoMaterial( 0, "models/shiny" )
    Indexer = 1
}

runOnChat(1)
    local STR_cut = 
"
"
if( chatClk(Owner) )
{
    local LS = lastSaid()
    
    if( LS:index(1) == "/" )
    {
        hideChat(1)
        local Syntax = LS:explode(" ")
        local Synt = Syntax[1,string]
        
        if( Synt == "/set" )
        {
            local Synt = Syntax[2,string]
            
            if( Synt == "r" )
            {
                Scan_r = Syntax[3,string]:toNumber()  
                holoScaleUnits( 0, vec(Scan_r) )
                Scanner:soundPlay(1,100,"buttons/button24.wav")
            }
            
            if( Synt == "base" )
            {
                TechEnt = Owner:aimEntity()
                if( TechEnt == Scanner )
                { 
                    holoDelete(1)
                    stoptimer( "ScannerLaserPos" ) 
                }
                else
                { 
                    holoCreate( 1, Scanner:pos(), vec(0), Scanner:angles(), vec4(0,255,255,125),"models/hunter/tubes/tube1x1x8.mdl") holoMaterial( 1, "models/shiny" ) holoDisableShading( 1, 1 ) holoParent( 1, Scanner )
                    timer( "ScannerLaserPos", 1 ) 
                }
                holoPos( 0, TechEnt:pos() )
                holoAng( 0, TechEnt:angles() )
                holoParent( 0, TechEnt )
                Scanner:soundPlay(1,100,"buttons/combine_button1.wav")
            }
            
            if( Synt == "clone" )
            {
                ClonEnt = Owner:aimEntity()
                if( ClonEnt == Scanner )
                { 
                    holoDelete(2)
                    stoptimer( "CloneLaserPos" ) 
                }
                else
                { 
                    holoCreate( 2, Scanner:pos(), vec(0), Scanner:angles(), vec4(0,255,0,125),"models/hunter/tubes/tube1x1x8.mdl") holoMaterial( 2, "models/shiny" ) holoDisableShading( 2, 1 ) holoParent( 2, Scanner )
                    timer( "CloneLaserPos", 1 ) 
                }
                Scanner:soundPlay(1,100,"buttons/combine_button1.wav")
            }
            
        }
        
        if( Synt == "/scan" )
        { 

            Blueprint=

"@name Blueprint
@persist Blueprint:table Base:entity I

if(first()|dupefinished())
{
    Base = entity()
    Blueprint = table("+STR_cut
            findExcludeEntities(array(Scanner,holoEntity(0),holoEntity(1)))
            findExcludeModel("models/error.mdl")
            findInSphere(TechEnt:pos(),Scan_r)
            #findSortByDistance(TechEnt:pos())
            Objects=findToTable()
            timer( "blueprintCreate", 1 )
            Scanner:soundPlay(1,100,"buttons/button6.wav")
        }
        
    }
    
}

local Scanner_pos = Scanner:pos()

if( clk("ScannerLaserPos") )
{
    local TechEnt_pos = TechEnt:pos()
    local Dist = Scanner_pos:distance(TechEnt_pos)
    holoAng(1,(TechEnt_pos-Scanner_pos):toAngle()+ang(90,0,0))
    holoScaleUnits(1,vec(3,3,Dist))
    timer( "ScannerLaserPos", 60 )  
}

if( clk("CloneLaserPos") )
{
    local CloneEnt_pos = ClonEnt:pos()
    local Dist = Scanner_pos:distance(CloneEnt_pos)
    holoAng(2,(CloneEnt_pos-Scanner_pos):toAngle()+ang(90,0,0))
    holoScaleUnits(2,vec(3,3,Dist))
    timer( "CloneLaserPos", 60 )  
}

if( clk("blueprintCreate") )
{
    local Q = Objects:count()
    while( Indexer < Q && perf() )
    {
        
        local Object = Objects[Indexer,entity]
        
        local Parent_F = Object:parent()
        local Parent_index = 0
        while( Parent_index < Q )
        {
            if( !perf() ){ Parent_index=-1 break }
            Parent_index++
            local Object = Objects[Parent_index,entity]
            if( Object == Parent_F ){ break }
        }
        if( Parent_index==-1 )
        {
             break
        }
        else 
        {
            local Index    = Indexer:toString()
            local Parent   = Parent_index:toString()
            local Position = round(TechEnt:toLocal(Object:pos()),3)
            local Angle    = round(TechEnt:toLocal(Object:angles()),3)
            local Scale    = round(Object:boxSize(),3)
            local Model    = Object:model()
            local Material = Object:getMaterial()
            local Color4   = Object:getColor4()
            
            local STR_Position = "vec( "+Position:x():toString()+", "+Position:y():toString()+", "+Position:z():toString()+" )"
            local STR_Angle = "ang( "+Angle:pitch():toString()+", "+Angle:yaw():toString()+", "+Angle:roll():toString()+" )"
            local STR_Scale = "vec( "+Scale:x():toString()+", "+Scale:y():toString()+", "+Scale:z():toString()+" )"
            local STR_Model = "\""+Model+"\""
            local STR_Material = "\""+Material+"\""
            local STR_Color4 = "vec4( "+Color4[1]:toString()+", "+Color4[2]:toString()+", "+Color4[3]:toString()+", "+Color4[4]:toString()+" )"
            
            Indexer++
            Ct=","+STR_cut
            if(Indexer==Q){ Ct=STR_cut+"    )" }
            
            local DataBlock = "        table( "+Index+", "+Parent+", "+STR_Position+", "+STR_Angle+", "+STR_Scale+", "+STR_Model+", "+STR_Material+", "+STR_Color4+" )"+Ct
            Blueprint = Blueprint + DataBlock
        }
    }

    if( Indexer < Q ){ timer( "blueprintCreate", 60 ) }
    else
    { 
        Indexer = 0
        Blueprint = Blueprint+STR_cut+"    timer( \"assemble\", 1 )"+STR_cut+"}"+STR_cut+
"
if( clk(\"assemble\") )
{
    local Q = Blueprint:count()
    while( I < Q && perf() && holoCanCreate() )
    {
        I++
        HoloData = Blueprint[I,table]
        local Index    = HoloData[1,number]
        local Position = Base:toWorld(HoloData[3,vector])
        local Angle    = Base:toWorld(HoloData[4,angle])
        local Model    = HoloData[6,string]
        local Material = HoloData[7,string]
        local Color4   = HoloData[8,vector4]
        holoCreate(Index,Position,vec(),Angle,Color4,Model) 
        holoMaterial(Index,Material)
    }
    if( I < Q )
    { timer( \"assemble\", 250 ) }
    else
    {
        for( I=1, Q, 1 )
        {
            HoloData = Blueprint[I,table]
            local Index    = HoloData[1,number]
            local Parent = HoloData[2,number]
            local Scale  = HoloData[5,vector]
            holoScaleUnits(Index,Scale)
            if( Parent )
            {
                holoParent(Index,Parent)
            }
            else
            {
                holoParent(Index,HoloData[2,entity])
            }
        }  
    }
}"
        fileWrite("Blueprints/Blueprint.txt",Blueprint)
        ClonEnt:remoteSetCode(Blueprint)
    }
}

@name Prop to holo
@persist Seeker_distance Holo_spawnTime Seeker_color:vector [Owner Converter]:entity [Code_text Code_print]:string Task
@persist FoundProps_count Converted Trimmers [Props FoundProps]:array I

if( first() | dupefinished() )
{
    
    #====MajorSettings====#
    
    Owner = owner()
    
    Converter = entity()
    
    I = 1
    
    #========Deflaut======#

    Seeker_distance = 500
    
    Seeker_color = vec( 255 , 255 , 255 )
    
    Holo_spawnTime = 2000
    
    print("======Deflaut settings======")
    
    printColor( "Color: " , Seeker_color , Seeker_color:toString() )
    
    printColor( "Seeker_distance: " , vec( 100 , 0 , 255 ) , Seeker_distance:toString() )
    
    printColor( "HoloSpawnTimer: " , vec( 100 , 0 , 255 ) , Holo_spawnTime:toString() )
    
    printColor("========Commands========" , "
    
    >marker" , vec(255,0,0) , " R " , vec(0,255,0) , "G" , vec(0,0,255) , " B " , vec(255) , "
    
    >distance" , vec( 100 , 0 , 255 ) , " dist" , vec(255) , "
    
    >spawnTime" , vec( 100 , 0 , 255 ) , " time" , vec(255 , 100 , 0) , "  
    
    >convert")

}

runOnChat(1)

if( changed( lastSaidWhen() ) && lastSpoke() == Owner )
{
    
    local Last_said = lastSaid()
    
    local Command_marker = Last_said:index(1)
    
    if( Command_marker == ">" )
    {
        
        local LS = Last_said:explode(" ")
        
        local Command = LS[ 1 , string ]
        
        #=======Marker========#
        
        if( Command == ">marker" )
        {
            
            Seeker_color = vec( LS[ 2 , string ]:toNumber() , LS[ 3 , string ]:toNumber() , LS[ 4 , string ]:toNumber() )  
            
            printColor( "RGB filter set " , Seeker_color , Seeker_color:toString() )  
            
        }
        
        #=======Seeker========#
        
        if( Command == ">distance" )
        {
            
            Seeker_distance = LS[ 2 , string ]:toNumber()
            
            printColor("New search distance: ", vec(100 , 0 , 255) , Seeker_distance )
            
        }
        
        #=======Spawner=======#
        
        if( Command == ">spawnTime" )
        {
            
            Holo_spawnTime = LS[ 2 , string ]:toNumber()
            
            printColor("New spawn delay: ", vec(100 , 0 , 255) , Holo_spawnTime )
            
        }        
        
        #======Converter======#
        
        if( Command == ">convert" )
        {
            
            printColor( "Searching in distance " , vec( 100 , 0 , 255 ) , Seeker_distance:toString() , vec( 255 ) ,  ", by color " , Seeker_color , Seeker_color:toString() )
            
            findIncludePlayerProps( Owner )
            
            findExcludeClass("Player")
            
            findExcludeClass("Weapon")
            
            findExcludeClass("gmod")
            
            findInSphere( Converter:pos() , Seeker_distance )
            
            FoundProps = findToArray()
            
            FoundProps_count = FoundProps:count()
        
            Task = Trimmers = 1
                 
        }
                      
    }
      
}

interval(60)

if(perf())
{

        if( I < FoundProps_count )
        {
       
                local Prop = FoundProps[ I , entity ]
                
                local Prop_color = Prop:getColor()
                
                if( Prop:owner() == Owner && Prop_color == Seeker_color )
                {
                    
                    local Prop_Position = round( Prop:pos() - Converter:pos() , 3 )
                    
                    local Prop_Scale = round( Prop:boxSize() , 3 )
                    
                    local Prop_angle = round( Prop:angles() - Converter:angles() , 3 )
                    
                    local Prop_model = Prop:model()
                    
                    local Prop_material = Prop:getMaterial()
                    
                    Code_text = Code_text +
"                   
I++ holoCreate( I , Base:toWorld(vec(" + Prop_Position:x():toString() + "," + Prop_Position:y():toString() + "," + Prop_Position:z():toString() + ")),vec(),Base:toWorld(ang("  + Prop_angle:pitch():toString() + "," + Prop_angle:yaw():toString() + "," + Prop_angle:roll():toString() + ")),vec(255, 255, 255)," + "\"" + Prop_model + "\"" + ") holoMaterial(I," + "\"" + Prop_material + "\"" + ") holoParent(I, Base) holoAlpha(I, 255) holoScaleUnits(I,vec(" + Prop_Scale:x():toString() + "," + Prop_Scale:y():toString() + "," + Prop_Scale:z():toString() + "))" 
                   
                    Converted++
                    
                    if(Converted > 9 && perf() )
                    {
                        
                        Trimmers++
                        
                        Code_text = Code_text + 
                        
"
}
if( clk( " + "\"" + Trimmers:toString() + "\"" + " ) )
{
    
"
                    Converted = 0
                    
                    }
                     
                }
                
                    I++
                print(FoundProps_count - I)
        }

if( I >= FoundProps_count && Task )
{
                

        Code_text = Code_text + 
"

}
"

Code_print = 

"

@name Convv

@persist Base:entity I

if( first() | dupefinished() )
{
    
    Base = entity()
    
    local I = 0
    
    while( I < " + Trimmers:toString() + " )
    {
        
        I++
        
        timer( I:toString() , " + Holo_spawnTime:toString() + " * I )
        
    }
    
}

if( clk( " + "\"" + "1" + "\"" + " ) )
{

" + Code_text
 

            
            Converter:remoteSetCode( Code_print )
                
}            


}
